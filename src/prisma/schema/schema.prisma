// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// we can make multi-schema files in a folder but need config in generator or merge all models in one schema file

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "driverAdapters", "prismaSchemaFolder"]
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  name             String
  password         String            @db.VarChar(256)
  phoneNumber     String            @unique
  emailStatus     String            @default("Deactivated")
  verficationCode Verification?
  messages         ChatMessage[] // One-to-many relationship with Message
  participants     ChatParticipant[] // One-to-many relationship with ChatParticipant
}

model Verification {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int      @unique
  createdAt DateTime @default(now())
}

// Chat Model
model Chat {
  id           Int               @id @default(autoincrement())
  lastMessageId  Int?              @unique // Making it optional to handle cases when there is no message yet
  lastMessage    ChatMessage?      @relation("LastMessageInChat", fields: [lastMessageId], references: [id])
  participants ChatParticipant[]
  messages     ChatMessage[]
}

// ChatParticipant Model
model ChatParticipant {
  id     Int  @id @default(autoincrement())
  chatId Int
  userId Int
  chat   Chat @relation(fields: [chatId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
}

// ChatMessage Model 
// did it this way since there will also be group and community messages
model ChatMessage {
  id        Int      @id @default(autoincrement())
  chatId    Int // Reference to the Chat
  senderId  Int // Reference to the User who sent the message
  content   String
  createdAt DateTime @default(now())
  sender    User     @relation(fields: [senderId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id]) // Relation to Chat
  lastMessageChats Chat[] @relation("LastMessageInChat") // Relation to Chat's lastMessageId
}
