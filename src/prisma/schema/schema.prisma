generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextIndex", "fullTextSearch", "prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  name            String
  password        String            @db.VarChar(256)
  phoneNumber     String?           @unique
  loggedInDevices Int               @default(0)
  messages        ChatMessage[] 
  participants    ChatParticipant[] 
}

model Chat {
  id            Int               @id @default(autoincrement())
  lastMessageId Int?              @unique
  lastMessage   ChatMessage?      @relation("LastMessageInChat", fields: [lastMessageId], references: [id])
  messages      ChatMessage[]
  participants  ChatParticipant[]
}

model ChatParticipant {
  id     Int  @id @default(autoincrement())
  chatId Int
  userId Int
  chat   Chat @relation(fields: [chatId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
}

model ChatMessage {
  id                Int                @id @default(autoincrement())
  chatId            Int                // Reference to the Chat
  senderId          Int                // Reference to the User who sent the message
  content           String
  createdAt         DateTime           @default(now())
  read              DateTime?          @default(now())
  delivered         DateTime?          @default(now())
  forwarded         Boolean            @default(false)
  pinned            Boolean            @default(false)
  selfDestruct      Boolean            @default(false)
  expiresAfter      Int?
  type              String
  parentMessageId   Int?
  sender            User               @relation(fields: [senderId], references: [id])
  chat              Chat               @relation(fields: [chatId], references: [id]) // Relation to Chat
  lastMessageChat   Chat?              @relation("LastMessageInChat") // Relation to Chat's lastMessageId
  voiceChatMessage  VoiceChatMessage?  
  parentMessage     ChatMessage?       @relation("ReplyToMessage", fields: [parentMessageId], references: [id]) 
  reply           ChatMessage[]        @relation("ReplyToMessage") // To get all replies
}

model VoiceChatMessage {
  id                Int                @id @default(autoincrement())
  chatMessageId     Int                @unique
  chatMessage       ChatMessage        @relation(fields: [chatMessageId], references: [id])   
}

