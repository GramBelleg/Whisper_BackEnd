model User {
  id                        Int                  @id @default(autoincrement())
  email                     String               @unique
  userName                  String               @unique //*CHANGE THIS* it has to be unique but fix with oAuth
  name                      String?
  password                  String               @db.VarChar(256)
  phoneNumber               String?              @unique
  loggedInDevices           Int                  @default(0)
  profilePic                String?
  lastSeen                  DateTime             @default(now())
  hasStory                  Boolean              @default(false)
  bio                       String?
  status                    String?
  AutomaticDownloadFileSize Int                  @default(0)
  readReceipts              Boolean              @default(true)
  Messages                  Message[]
  chatParticipant           ChatParticipant[]
  groupParticipant          GroupParticipant[]
  channelParticipant        ChannelParticipant[]
  tokens                    UserToken[]
  messageStatus             MessageStatus[]
  story                     Story[]
  relating                  Relates[]            @relation("relating")
  relatedBy                 Relates[]            @relation("relatedBy")
}

model UserToken {
  userId   Int
  token    String
  expireAt DateTime
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, token])
  @@index([userId])
}

model Story {
  id      Int      @id @default(autoincrement())
  userId  Int
  user    User     @relation(fields: [userId], references: [id])
  date    DateTime @default(now())
  content String
  media   String
}

model Relates {
  relatingId  Int
  relatedById Int
  isBlocked   Boolean
  isContact   Boolean
  relating    User    @relation("relating", fields: [relatingId], references: [id])
  relatedBy   User    @relation("relatedBy", fields: [relatedById], references: [id])

  @@id([relatingId, relatedById])
}
